package com.logistics.service;

import com.logistics.model.Customer;
import com.logistics.model.Order;
import com.logistics.model.Vehicle;
import com.logistics.repositories.OrderRepository;
import com.logistics.repositories.VehicleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class OrderCreationService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private VehicleRepository vehicleRepository;

    @Autowired
    private AuthService authService;

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    private final Map<Long, OrderCreationState> orderCreationStates = new ConcurrentHashMap<>();

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    private final Map<Long, OrderData> orderData = new ConcurrentHashMap<>();

    public void startOrderCreation(Long chatId) {
        orderCreationStates.put(chatId, OrderCreationState.AWAITING_ADDRESS);
        orderData.put(chatId, new OrderData());
    }

    public String processOrderCreationInput(Long chatId, String input) {
        OrderCreationState currentState = orderCreationStates.get(chatId);

        if (currentState == null) {
            return "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_order –¥–ª—è –Ω–∞—á–∞–ª–∞.";
        }

        switch (currentState) {
            case AWAITING_ADDRESS:
                return processAddress(chatId, input);
            case AWAITING_WEIGHT:
                return processWeight(chatId, input);
            case AWAITING_CONFIRMATION:
                return processConfirmation(chatId, input);
            default:
                cancelOrderCreation(chatId);
                return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        }
    }

    private String processAddress(Long chatId, String address) {
        if (address == null || address.trim().isEmpty()) {
            return "‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:";
        }

        if (address.length() < 5) {
            return "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:";
        }

        OrderData data = orderData.get(chatId);
        data.setDeliveryAddress(address.trim());
        orderCreationStates.put(chatId, OrderCreationState.AWAITING_WEIGHT);

        return "‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüì¶ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):";
    }

    private String processWeight(Long chatId, String weightInput) {
        try {
            int weight = Integer.parseInt(weightInput.trim());

            if (weight <= 2000) {
                return "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–∫–∞–∑–∞ 2000 –∫–≥:";
            }

            if (weight > 21000) {
                return "‚ùå –í–µ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å - 21000 –∫–≥. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–∏–π –≤–µ—Å:";
            }

            OrderData data = orderData.get(chatId);
            data.setTotalWeight(weight);

            // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            List<Vehicle> availableVehicles = vehicleRepository.findAvailableVehiclesWithCapacity(weight / 1000.0);

            if (availableVehicles.isEmpty()) {
                orderCreationStates.put(chatId, OrderCreationState.AWAITING_CONFIRMATION);
                data.setVehicle(null);
                return String.format(
                        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–µ—Å–æ–º %d –∫–≥.\n\n" +
                                "üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n" +
                                "‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n" +
                                "‚Ä¢ –í–µ—Å: %d –∫–≥\n" +
                                "‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–∑–∂–µ\n\n" +
                                "–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑? (–¥–∞/–Ω–µ—Ç)",
                        weight, data.getDeliveryAddress(), weight
                );
            } else {
                Vehicle selectedVehicle = availableVehicles.get(0);
                data.setVehicle(selectedVehicle);

                orderCreationStates.put(chatId, OrderCreationState.AWAITING_CONFIRMATION);

                return String.format(
                        "‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç!\n\n" +
                                "üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n" +
                                "‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n" +
                                "‚Ä¢ –í–µ—Å: %d –∫–≥\n" +
                                "‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: %s (%s, –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: %.1f —Ç)\n\n" +
                                "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞? (–¥–∞/–Ω–µ—Ç)",
                        data.getDeliveryAddress(), weight,
                        selectedVehicle.getModel(), selectedVehicle.getLicensePlate(),
                        selectedVehicle.getCapacityTon()
                );
            }

        } catch (NumberFormatException e) {
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):";
        }
    }

    private String processConfirmation(Long chatId, String confirmation) {
        String lowerConfirmation = confirmation.trim().toLowerCase();

        if (lowerConfirmation.equals("–¥–∞") || lowerConfirmation.equals("yes") ||
                lowerConfirmation.equals("y") || lowerConfirmation.equals("–¥")) {

            return createOrder(chatId);

        } else if (lowerConfirmation.equals("–Ω–µ—Ç") || lowerConfirmation.equals("no") ||
                lowerConfirmation.equals("n") || lowerConfirmation.equals("–Ω")) {

            cancelOrderCreation(chatId);
            return "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.";

        } else {
            return "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç':";
        }
    }

    private String createOrder(Long chatId) {
        try {
            Customer customer = authService.getAuthenticatedCustomer(chatId);
            OrderData data = orderData.get(chatId);

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            Order order = new Order();
            order.setId(orderRepository.findMaxOrderId() + 1);
            order.setCreateTime(LocalDateTime.now());
            order.setDeliveryAddress(data.getDeliveryAddress());
            order.setTotalWeight(data.getTotalWeight());
            order.setStatus("—Å–æ–∑–¥–∞–Ω");
            order.setCustomer(customer);

            if (data.getVehicle() != null) {
                order.setVehicle(data.getVehicle());
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–∫–∞–∑–∞
            Integer maxOrderId = orderRepository.findMaxOrderId();
            int newOrderId = (maxOrderId != null) ? maxOrderId + 1 : 1;

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            Order savedOrder = orderRepository.save(order);

            // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            orderCreationStates.remove(chatId);
            orderData.remove(chatId);

            String successMessage = String.format(
                    "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n" +
                            "üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #%d\n" +
                            "üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n" +
                            "‚öñÔ∏è –í–µ—Å: %d –∫–≥\n" +
                            "üìä –°—Ç–∞—Ç—É—Å: %s\n" +
                            "üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: %s\n\n" +
                            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'.",
                    savedOrder.getId(),
                    savedOrder.getDeliveryAddress(),
                    savedOrder.getTotalWeight(),
                    savedOrder.getStatus(),
                    savedOrder.getCreateTime()
            );

            if (data.getVehicle() == null) {
                successMessage += "\n\n‚ö†Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–∑–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.";
            }

            return successMessage;

        } catch (Exception e) {
            e.printStackTrace();
            cancelOrderCreation(chatId);
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    public void cancelOrderCreation(Long chatId) {
        orderCreationStates.remove(chatId);
        orderData.remove(chatId);
    }

    public boolean isUserInOrderCreationProcess(Long chatId) {
        return orderCreationStates.containsKey(chatId);
    }

    public OrderCreationState getCurrentState(Long chatId) {
        return orderCreationStates.get(chatId);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    private enum OrderCreationState {
        AWAITING_ADDRESS,
        AWAITING_WEIGHT,
        AWAITING_CONFIRMATION
    }

    private static class OrderData {
        private String deliveryAddress;
        private Integer totalWeight;
        private Vehicle vehicle;

        // Getters and setters
        public String getDeliveryAddress() { return deliveryAddress; }
        public void setDeliveryAddress(String deliveryAddress) { this.deliveryAddress = deliveryAddress; }

        public Integer getTotalWeight() { return totalWeight; }
        public void setTotalWeight(Integer totalWeight) { this.totalWeight = totalWeight; }

        public Vehicle getVehicle() { return vehicle; }
        public void setVehicle(Vehicle vehicle) { this.vehicle = vehicle; }
    }
}