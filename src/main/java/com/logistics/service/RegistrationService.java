package com.logistics.service;

import com.logistics.DTO.RegistrationDTOs.*;
import com.logistics.component.*;
import com.logistics.model.*;
import com.logistics.repositories.CustomerRepository;
import org.springframework.stereotype.*;
import java.util.*;
import java.util.concurrent.*;

@Service
public class RegistrationService {

    private Map<Long, RegistrationState> userStates = new ConcurrentHashMap<>();
    private Map<Long, UserRegistrationDTO> userData = new ConcurrentHashMap<>();
    private final MessageSender messageSender;
    private final InputValidator inputValidator;
    private final PasswordHasher passwordHasher;
    private final CustomerRepository customerRepository;

    public RegistrationService(MessageSender messageSender,
                               InputValidator inputValidator,
                               PasswordHasher passwordHasher,
                               CustomerRepository customerRepository) {
        this.messageSender = messageSender;
        this.inputValidator = inputValidator;
        this.passwordHasher = passwordHasher;
        this.customerRepository = customerRepository;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    public boolean isUserInRegistrationProcess(Long chatId) {
        return userStates.containsKey(chatId);
    }

    public void startRegistration(Long chatId) {
        userStates.put(chatId, RegistrationState.WAITING_FOR_EMAIL);
        userData.put(chatId, new UserRegistrationDTO());

        messageSender.sendMessageWithCancel(chatId,  // –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                "üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n" +
                        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:");
    }

    public void processInput(Long chatId, String message) {
        RegistrationState currentState = userStates.get(chatId);

        if (currentState == null) {
            messageSender.sendMessage(chatId, "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /sign");
            return;
        }

        // –ü–†–û–í–ï–†–Ø–ï–ú –û–¢–ú–ï–ù–£ –ü–ï–†–í–´–ú –î–ï–õ–û–ú
        if ("‚ùå –û—Ç–º–µ–Ω–∞".equals(message)) {
            cancelRegistration(chatId);
            return;
        }

        UserRegistrationDTO data = userData.get(chatId);

        switch (currentState) {
            case WAITING_FOR_EMAIL:
                if (inputValidator.isValidEmail(message)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email
                    if (customerRepository.findByEmail(message).isPresent()) {
                        messageSender.sendMessageWithCancel(chatId,
                                "‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email:");
                        return;
                    }
                    data.setEmail(message);
                    userStates.put(chatId, RegistrationState.WAITING_FOR_NAME);
                    messageSender.sendMessageWithCancel(chatId,
                            "‚úÖ Email –ø—Ä–∏–Ω—è—Ç!\n\n" +
                                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:");
                } else {
                    messageSender.sendMessageWithCancel(chatId,
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                }
                break;

            case WAITING_FOR_NAME:
                if (inputValidator.isValidName(message)) {
                    data.setName(message);
                    userStates.put(chatId, RegistrationState.WAITING_FOR_PHONE);
                    messageSender.sendMessageWithCancel(chatId,
                            "‚úÖ –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ!\n\n" +
                                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
                } else {
                    messageSender.sendMessageWithCancel(chatId,
                            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                }
                break;

            case WAITING_FOR_PHONE:
                if (inputValidator.isValidPhone(message)) {
                    data.setPhone(message);
                    userStates.put(chatId, RegistrationState.WAITING_FOR_ADDRESS);
                    messageSender.sendMessageWithCancel(chatId,
                            "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç!\n\n" +
                                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:");
                } else {
                    messageSender.sendMessageWithCancel(chatId,
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                }
                break;

            case WAITING_FOR_ADDRESS:
                if (inputValidator.isValidAddress(message)) {
                    data.setAddress(message);
                    userStates.put(chatId, RegistrationState.WAITING_FOR_PASSWORD);
                    messageSender.sendMessageWithCancel(chatId,
                            "‚úÖ –ê–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç!\n\n" +
                                    "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):");
                } else {
                    messageSender.sendMessageWithCancel(chatId,
                            "‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                }
                break;

            case WAITING_FOR_PASSWORD:
                if (inputValidator.isValidPassword(message)) {
                    data.setPassword(message);
                    userStates.put(chatId, RegistrationState.WAITING_FOR_CONFIRMATION);
                    messageSender.sendMessageWithCancel(chatId,
                            "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\n" +
                                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:");
                } else {
                    messageSender.sendMessageWithCancel(chatId,
                            "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                }
                break;

            case WAITING_FOR_CONFIRMATION:
                if (data.getPassword().equals(message)) {
                    data.setPassword(passwordHasher.hashPassword(message));
                    completeRegistration(chatId, data);
                } else {
                    messageSender.sendMessageWithCancel(chatId,
                            "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:");
                    userStates.put(chatId, RegistrationState.WAITING_FOR_PASSWORD);
                }
                break;
        }
    }

    private void completeRegistration(Long chatId, UserRegistrationDTO data) {
        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            data.setUserId(customerRepository.findMaxCustomerId() + 1);
            Customer customer = new Customer(data);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            Customer savedCustomer = customerRepository.save(customer);

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            userStates.remove(chatId);
            userData.remove(chatId);

            messageSender.sendMessage(chatId,
                    "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n" +
                            "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" +
                            "‚Ä¢ Email: " + data.getEmail() + "\n" +
                            "‚Ä¢ –ò–º—è: " + data.getName() + "\n" +
                            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: " + data.getPhone() + "\n" +
                            "‚Ä¢ –ê–¥—Ä–µ—Å: " + data.getAddress() + "\n\n" +
                            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à ID: " + savedCustomer.getCustomerId(),
                    true); // true - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        } catch (Exception e) {
            messageSender.sendMessage(chatId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage() + "\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /sign",
                    true); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            userStates.remove(chatId);
            userData.remove(chatId);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    public void cancelRegistration(Long chatId) {
        userStates.remove(chatId);
        userData.remove(chatId);
        messageSender.sendMessage(chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", true);
    }
}

enum RegistrationState {
    WAITING_FOR_EMAIL,
    WAITING_FOR_NAME,
    WAITING_FOR_PHONE,
    WAITING_FOR_ADDRESS,
    WAITING_FOR_PASSWORD,
    WAITING_FOR_CONFIRMATION
}