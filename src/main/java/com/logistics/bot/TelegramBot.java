package com.logistics.bot;

import com.logistics.model.*;
import com.logistics.service.*;
import com.logistics.service.SessionService;
import com.logistics.session.UserSession;
import jakarta.annotation.*;
import org.springframework.beans.factory.annotation.*;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    @Autowired
    private OrderService orderService;

    @Autowired
    private OrderCreationService orderCreationService;

    @Autowired
    private LoginService loginService;

    @Autowired
    private AuthService authService;

    private final RegistrationService registrationService;
    private final MessageSender messageSender;
    private final SessionService sessionService;

    @Value("${bot.username}")
    private String botUsername;

    public TelegramBot(@Value("${bot.token}") String botToken,
                       RegistrationService registrationService,
                       MessageSender messageSender,
                       SessionService sessionService) {
        super(botToken);
        this.registrationService = registrationService;
        this.messageSender = messageSender;
        this.sessionService = sessionService;
    }

    @PostConstruct
    public void init() {
        MessageSender.setBot(this);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            processMessage(messageText, chatId);
        }
    }



    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–Ω–∞/–ª–æ–≥–∞—É—Ç–∞
    private void handleLogout(Long chatId) {
        if (authService.isAuthenticated(chatId)) {
            Customer customer = authService.getAuthenticatedCustomer(chatId);
            authService.logout(chatId);
            sessionService.updateSessionState(chatId, "UNAUTHENTICATED");
            sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, " + customer.getFullName() + "!");
        } else {
            sendMessage(chatId, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
        }
    }

    private void showUserProfile(Long chatId) {
        if (authService.isAuthenticated(chatId)) {
            Customer customer = authService.getAuthenticatedCustomer(chatId);
            String profile = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" +
                    "‚Ä¢ –ò–º—è: " + customer.getFullName() + "\n" +
                    "‚Ä¢ Email: " + customer.getEmail() + "\n" +
                    "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: " + customer.getPhone() + "\n" +
                    "‚Ä¢ –ê–¥—Ä–µ—Å: " + customer.getAddress() + "\n\n" +
                    "–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω";
            sendMessage(chatId, profile);
        } else {
            sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.");
        }
    }


    private void startSession(Long chatId) {
        sessionService.createSession(chatId);
    }

    private void endSession(Long chatId) {
        sessionService.invalidateSession(chatId);
        sendMessage(chatId, "üîí –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
    }

    private void showSessionStatus(Long chatId) {
        UserSession session = sessionService.getSession(chatId);
        if (session != null) {
            String status = "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:\n" +
                    "‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: " + session.getCreatedAt() + "\n" +
                    "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + session.getLastAccessed() + "\n" +
                    "‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ";
            sendMessage(chatId, status);
        } else {
            sendMessage(chatId, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
        }
    }

    private void sendSessionExpiredMessage(Long chatId) {
        String message = "‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!\n\n" +
                "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n" +
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message);

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setSelective(true);
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("üöÄ –°—Ç–∞—Ä—Ç");
        keyboardRows.add(row);
        keyboard.setKeyboard(keyboardRows);

        sendMessage.setReplyMarkup(keyboard);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void sendAboutMessage(Long chatId) {
        String aboutText = "ü§ñ Logistics Bot\n\n" +
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏.\n\n" +
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
                "‚Ä¢ üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" +
                "‚Ä¢ üöö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏\n" +
                "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤\n" +
                "‚Ä¢ üîê –°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—Å–∏–π (30 –º–∏–Ω—É—Ç)\n\n" +
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!";

        sendMessageWithMenu(chatId, aboutText);
    }

    private void sendDefaultMessage(Long chatId) {
        String defaultText = "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                "/sign - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" +
                "/help - –ø–æ–º–æ—â—å\n" +
                "/session - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏\n" +
                "/logout - –≤—ã—Ö–æ–¥";

        sendMessageWithMenu(chatId, defaultText);
    }

    private void sendMessageWithMenu(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é
        ReplyKeyboardMarkup keyboardMarkup = createMainMenuKeyboard(chatId);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Logistics Bot!\n\n" +
                "‚úÖ –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞! –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏.\n\n";

        if (authService.isAuthenticated(chatId)) {
            Customer customer = authService.getAuthenticatedCustomer(chatId);
            welcomeText += "‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: " + customer.getFullName() + "\n\n";
        } else {
            welcomeText += "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n\n";
        }

        welcomeText += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";

        sendMessageWithMenu(chatId, welcomeText);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ sendHelpMessage:
    private void sendHelpMessage(Long chatId) {
        String helpText = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";

        if (authService.isAuthenticated(chatId)) {
            helpText += "‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n";
        } else {
            helpText += "‚Ä¢ üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n";
            helpText += "‚Ä¢ üîê –í—Ö–æ–¥ - –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n";
        }

        helpText += "‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "‚Ä¢ ‚ÑπÔ∏è –û –±–æ—Ç–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
                "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n" +
                "‚Ä¢ üö™ –í—ã—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n" +
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/sign - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" +
                "/login - –≤—Ö–æ–¥\n" +
                "/profile - –ø—Ä–æ—Ñ–∏–ª—å\n" +
                "/help - –ø–æ–º–æ—â—å\n" +
                "/session - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏\n" +
                "/logout - –≤—ã—Ö–æ–¥";

        sendMessageWithMenu(chatId, helpText);
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ processMessage
    private void processMessage(String text, Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
        if ("/logout".equals(text) || "üö™ –í—ã—Ö–æ–¥".equals(text)) {
            handleLogout(chatId);
            return;
        }

        if ("/session".equals(text) || "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏".equals(text)) {
            showSessionStatus(chatId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start)
        if (!"/start".equals(text) && !"üöÄ –°—Ç–∞—Ä—Ç".equals(text)) {
            if (!sessionService.isSessionActive(chatId)) {
                sendSessionExpiredMessage(chatId);
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        if (registrationService.isUserInRegistrationProcess(chatId)) {
            registrationService.processInput(chatId, text);
        } else if (loginService.isUserInLoginProcess(chatId)) {
            String response = loginService.processLoginInput(chatId, text);
            sendMessage(chatId, response);
        } else if (orderCreationService.isUserInOrderCreationProcess(chatId)) {
            String response = orderCreationService.processOrderCreationInput(chatId, text);
            sendMessage(chatId, response);
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
            handleCommands(text, chatId);
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ handleCommands - –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    private void handleCommands(String text, Long chatId) {
        switch (text) {
            case "/start":
            case "üöÄ –°—Ç–∞—Ä—Ç":
                startSession(chatId);
                sendWelcomeMessage(chatId);
                break;
            case "/help":
            case "‚ùì –ü–æ–º–æ—â—å":
                sendHelpMessage(chatId);
                break;
            case "/sign":
            case "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                if (authService.isAuthenticated(chatId)) {
                    sendMessage(chatId, "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout");
                } else {
                    registrationService.startRegistration(chatId);
                }
                break;
            case "/login":
            case "üîê –í—Ö–æ–¥":
                if (authService.isAuthenticated(chatId)) {
                    sendMessage(chatId, "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout");
                } else {
                    loginService.startLoginProcess(chatId);
                    sendMessage(chatId, "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:");
                }
                break;
            case "/profile":
            case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                showUserProfile(chatId);
                break;
            case "/new_order":
            case "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑":
                handleNewOrder(chatId);
                break;
            case "/my_orders":
            case "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
                showUserOrders(chatId);
                break;
            case "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                sendAboutMessage(chatId);
                break;
            case "‚ùå –û—Ç–º–µ–Ω–∞":
                handleCancel(chatId);
                break;
            default:
                sendDefaultMessage(chatId);
                break;
        }
    }

    private void handleNewOrder(Long chatId) {
        if (!authService.isAuthenticated(chatId)) {
            sendMessage(chatId, "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        orderCreationService.startOrderCreation(chatId);
        sendMessage(chatId, "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:");
    }

    private void showUserOrders(Long chatId) {
        if (!authService.isAuthenticated(chatId)) {
            sendMessage(chatId, "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        Customer customer = authService.getAuthenticatedCustomer(chatId);
        List<Order> orders = orderService.getUserOrders(customer.getCustomerId());

        if (orders.isEmpty()) {
            sendMessage(chatId, "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_order");
            return;
        }

        StringBuilder ordersText = new StringBuilder("üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n");
        for (Order order : orders) {
            ordersText.append(String.format(
                    "–ó–∞–∫–∞–∑ #%d\n" +
                            "‚Ä¢ –ê–¥—Ä–µ—Å: %s\n" +
                            "‚Ä¢ –í–µ—Å: %d –∫–≥\n" +
                            "‚Ä¢ –°—Ç–∞—Ç—É—Å: %s\n" +
                            "‚Ä¢ –î–∞—Ç–∞: %s\n\n",
                    order.getId(),
                    order.getDeliveryAddress(),
                    order.getTotalWeight(),
                    order.getStatus(),
                    order.getCreateTime()
            ));
        }

        sendMessage(chatId, ordersText.toString());
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ handleCancel
    private void handleCancel(Long chatId) {
        if (registrationService.isUserInRegistrationProcess(chatId)) {
            registrationService.cancelRegistration(chatId);
            sendMessage(chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
        } else if (loginService.isUserInLoginProcess(chatId)) {
            loginService.cancelLoginProcess(chatId);
            sendMessage(chatId, "‚ùå –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.");
        } else if (orderCreationService.isUserInOrderCreationProcess(chatId)) {
            orderCreationService.cancelOrderCreation(chatId);
            sendMessage(chatId, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        } else {
            sendMessage(chatId, "‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.");
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ createMainMenuKeyboard –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private ReplyKeyboardMarkup createMainMenuKeyboard(Long chatId) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        if (authService.isAuthenticated(chatId)) {
            // –ú–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            KeyboardRow row1 = new KeyboardRow();
            row1.add("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑");
            row1.add("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã");

            KeyboardRow row2 = new KeyboardRow();
            row2.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å");
            row2.add("‚ùì –ü–æ–º–æ—â—å");

            KeyboardRow row3 = new KeyboardRow();
            row3.add("‚ÑπÔ∏è –û –±–æ—Ç–µ");
            row3.add("üö™ –í—ã—Ö–æ–¥");

            keyboard.add(row1);
            keyboard.add(row2);
            keyboard.add(row3);
        } else {
            // –ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            KeyboardRow row1 = new KeyboardRow();
            row1.add("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
            row1.add("üîê –í—Ö–æ–¥");

            KeyboardRow row2 = new KeyboardRow();
            row2.add("‚ùì –ü–æ–º–æ—â—å");
            row2.add("‚ÑπÔ∏è –û –±–æ—Ç–µ");

            KeyboardRow row3 = new KeyboardRow();
            row3.add("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏");
            row3.add("üöÄ –°—Ç–∞—Ä—Ç");

            keyboard.add(row1);
            keyboard.add(row2);
            keyboard.add(row3);
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
}