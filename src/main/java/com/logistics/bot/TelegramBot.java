package com.logistics.bot;

import com.logistics.service.*;
import com.logistics.service.SessionService;
import com.logistics.session.UserSession;
import jakarta.annotation.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final RegistrationService registrationService;
    private final MessageSender messageSender;
    private final SessionService sessionService;

    @Value("${bot.username}")
    private String botUsername;

    public TelegramBot(@Value("${bot.token}") String botToken,
                       RegistrationService registrationService,
                       MessageSender messageSender,
                       SessionService sessionService) {
        super(botToken);
        this.registrationService = registrationService;
        this.messageSender = messageSender;
        this.sessionService = sessionService;
    }

    @PostConstruct
    public void init() {
        MessageSender.setBot(this);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            processMessage(messageText, chatId);
        }
    }

    private void processMessage(String text, Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
        if ("/logout".equals(text) || "üö™ –í—ã—Ö–æ–¥".equals(text)) {
            endSession(chatId);
            return;
        }

        if ("/session".equals(text) || "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏".equals(text)) {
            showSessionStatus(chatId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start)
        if (!"/start".equals(text) && !"üöÄ –°—Ç–∞—Ä—Ç".equals(text)) {
            if (!sessionService.isSessionActive(chatId)) {
                sendSessionExpiredMessage(chatId);
                return;
            }
        }

        if (registrationService.isUserInRegistrationProcess(chatId)) {
            registrationService.processInput(chatId, text);
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
            switch (text) {
                case "/start":
                case "üöÄ –°—Ç–∞—Ä—Ç":
                    startSession(chatId);
                    sendWelcomeMessage(chatId);
                    break;
                case "/help":
                case "‚ùì –ü–æ–º–æ—â—å":
                    sendHelpMessage(chatId);
                    break;
                case "/sign":
                case "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
                    registrationService.startRegistration(chatId);
                    break;
                case "‚ÑπÔ∏è –û –±–æ—Ç–µ":
                    sendAboutMessage(chatId);
                    break;
                case "‚ùå –û—Ç–º–µ–Ω–∞":
                    registrationService.cancelRegistration(chatId);
                    break;
                default:
                    sendDefaultMessage(chatId);
                    break;
            }
        }
    }

    private void startSession(Long chatId) {
        sessionService.createSession(chatId);
    }

    private void endSession(Long chatId) {
        sessionService.invalidateSession(chatId);
        sendMessage(chatId, "üîí –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
    }

    private void showSessionStatus(Long chatId) {
        UserSession session = sessionService.getSession(chatId);
        if (session != null) {
            String status = "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:\n" +
                    "‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: " + session.getCreatedAt() + "\n" +
                    "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + session.getLastAccessed() + "\n" +
                    "‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ";
            sendMessage(chatId, status);
        } else {
            sendMessage(chatId, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
        }
    }

    private void sendSessionExpiredMessage(Long chatId) {
        String message = "‚è∞ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!\n\n" +
                "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n" +
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message);

        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setSelective(true);
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("üöÄ –°—Ç–∞—Ä—Ç");
        keyboardRows.add(row);
        keyboard.setKeyboard(keyboardRows);

        sendMessage.setReplyMarkup(keyboard);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Logistics Bot!\n\n" +
                "‚úÖ –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞! –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏.\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:";

        sendMessageWithMenu(chatId, welcomeText);
    }

    private void sendHelpMessage(Long chatId) {
        String helpText = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "‚Ä¢ üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
                "‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "‚Ä¢ ‚ÑπÔ∏è –û –±–æ—Ç–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
                "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n" +
                "‚Ä¢ üö™ –í—ã—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n" +
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/sign - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" +
                "/help - –ø–æ–º–æ—â—å\n" +
                "/session - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏\n" +
                "/logout - –≤—ã—Ö–æ–¥";

        sendMessageWithMenu(chatId, helpText);
    }

    private void sendAboutMessage(Long chatId) {
        String aboutText = "ü§ñ Logistics Bot\n\n" +
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏.\n\n" +
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
                "‚Ä¢ üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" +
                "‚Ä¢ üöö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏\n" +
                "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤\n" +
                "‚Ä¢ üîê –°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—Å–∏–π (30 –º–∏–Ω—É—Ç)\n\n" +
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!";

        sendMessageWithMenu(chatId, aboutText);
    }

    private void sendDefaultMessage(Long chatId) {
        String defaultText = "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                "/sign - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" +
                "/help - –ø–æ–º–æ—â—å\n" +
                "/session - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏\n" +
                "/logout - –≤—ã—Ö–æ–¥";

        sendMessageWithMenu(chatId, defaultText);
    }

    private void sendMessageWithMenu(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é
        ReplyKeyboardMarkup keyboardMarkup = createMainMenuKeyboard();
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        // –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
        row1.add("‚ùì –ü–æ–º–æ—â—å");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥
        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚ÑπÔ∏è –û –±–æ—Ç–µ");
        row2.add("üöÄ –°—Ç–∞—Ä—Ç");

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ (–Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π)
        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏");
        row3.add("üö™ –í—ã—Ö–æ–¥");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
}